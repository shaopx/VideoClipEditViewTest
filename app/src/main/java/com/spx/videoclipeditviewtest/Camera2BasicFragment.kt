package com.spx.videoclipeditviewtest


import android.Manifest
import android.app.AlertDialog
import android.app.Dialog
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.ImageFormat
import android.graphics.Point
import android.graphics.SurfaceTexture
import android.hardware.camera2.CameraAccessException
import android.hardware.camera2.CameraCaptureSession
import android.hardware.camera2.CameraCharacteristics
import android.hardware.camera2.CameraDevice
import android.hardware.camera2.CameraManager
import android.hardware.camera2.CaptureRequest
import android.opengl.GLSurfaceView
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.HandlerThread
import android.os.Looper
import androidx.annotation.RequiresApi
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.util.Log
import android.util.Size
import android.util.SparseIntArray
import android.view.LayoutInflater
import android.view.Surface
import android.view.View
import android.view.ViewGroup
import com.daasuu.epf.EPlayerRenderer
import com.spx.opengleffectdemo.MyPreviewFilter
import com.spx.opengleffectdemo.MyRenderer
import com.spx.opengleffectdemo.ShaderUtil
import com.spx.videoclipeditviewtest.ext.createFilterOptions
import com.spx.videoclipeditviewtest.ext.getFilterByName
import com.spx.videoclipeditviewtest.ext.getInt
import com.spx.videoclipeditviewtest.view.BottomDialogFragment
import kotlinx.android.synthetic.main.fragment_camera2_basic.*

import java.util.ArrayList
import java.util.Arrays
import java.util.Collections
import java.util.Comparator
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit

/**
 * 这份代码很简陋, 是在谷歌camera2示例代码基础上修改的
 * 没有考虑资源释放等各种边界条件, 只是为了演示camera2 + opengl的使用.
 */
@RequiresApi(Build.VERSION_CODES.LOLLIPOP)
class Camera2BasicFragment : androidx.fragment.app.Fragment(),
  ActivityCompat.OnRequestPermissionsResultCallback, EPlayerRenderer.RenderCallback,
  MyRenderer.RenderCallback {

  val USE_MYRENDERER = false

  /**
   * ID of the current [CameraDevice].
   */
  private var mCameraId: Int = 0

  /**
   * An [AutoFitTextureView] for camera preview.
   */
  //    private AutoFitTextureView mTextureView;

  lateinit var myRenderer: MyRenderer
  var surfaceTexture: SurfaceTexture? = null
  var eRenderer: EPlayerRenderer? = null
  var myPreviewFilter: MyPreviewFilter?= null;

  /**
   * A [CameraCaptureSession] for camera preview.
   */
  private var mCaptureSession: CameraCaptureSession? = null

  /**
   * A reference to the opened [CameraDevice].
   */
  private var mCameraDevice: CameraDevice? = null

  /**
   * The [android.util.Size] of camera preview.
   */
  private var mPreviewSize: Size? = null

  /**
   * [CameraDevice.StateCallback] is called when [CameraDevice] changes its state.
   */
  private val mStateCallback = object : CameraDevice.StateCallback() {

    override fun onOpened(cameraDevice: CameraDevice) {
      // This method is called when the camera is opened.  We start camera preview here.
      mCameraOpenCloseLock.release()
      mCameraDevice = cameraDevice
      createCameraPreviewSession()

      myPreviewFilter?.setFront(mCameraId != 0)
      myRenderer?.setFront(mCameraId != 0)
    }

    override fun onDisconnected(cameraDevice: CameraDevice) {
      mCameraOpenCloseLock.release()
      cameraDevice.close()
      mCameraDevice = null
    }

    override fun onError(cameraDevice: CameraDevice, error: Int) {
      mCameraOpenCloseLock.release()
      cameraDevice.close()
      mCameraDevice = null
      val activity = activity
      activity?.finish()
    }
  }

  /**
   * An additional thread for running tasks that shouldn't block the UI.
   */
  private var mBackgroundThread: HandlerThread? = null

  /**
   * A [Handler] for running tasks in the background.
   */
  private var mBackgroundHandler: Handler? = null
  private lateinit var uiHandler: Handler


  /**
   * [CaptureRequest.Builder] for the camera preview
   */
  private var mPreviewRequestBuilder: CaptureRequest.Builder? = null

  /**
   * [CaptureRequest] generated by [.mPreviewRequestBuilder]
   */
  private var mPreviewRequest: CaptureRequest? = null

  /**
   * A [Semaphore] to prevent the app from exiting before closing the camera.
   */
  private val mCameraOpenCloseLock = Semaphore(1)

  /**
   * Whether the current camera device supports Flash or not.
   */
  private var mFlashSupported: Boolean = false

  /**
   * Orientation of the camera sensor
   */
  private var mSensorOrientation: Int = 0

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    uiHandler = Handler(Looper.getMainLooper());
  }

  override fun onCreateView(
    inflater: LayoutInflater, container: ViewGroup?,
    savedInstanceState: Bundle?
  ): View? {
    return inflater.inflate(R.layout.fragment_camera2_basic, container, false)
  }

  override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    glsurfaceview.setEGLContextClientVersion(3)
    if (USE_MYRENDERER) {
      myRenderer = MyRenderer()
      myRenderer.renderCallback = this
      //顶点着色器脚本R.raw.vertex
      myRenderer.vertexShaderSource =
        ShaderUtil.loadFromInputStream(resources.openRawResource(R.raw.vertex))
      //片元着色器脚本:R.raw.fragment
      myRenderer.fragmentShaderSource =
        ShaderUtil.loadFromInputStream(resources.openRawResource(R.raw.fragment))
      myRenderer.mSurfaceView = glsurfaceview
      glsurfaceview.setRenderer(myRenderer)
    } else {
      eRenderer = EPlayerRenderer(glsurfaceview)
      myPreviewFilter = MyPreviewFilter(requireContext())
      eRenderer!!.setPreviewFilter(myPreviewFilter!!)
      eRenderer!!.setCallback(this)
      glsurfaceview.setRenderer(eRenderer)
    }
//
    glsurfaceview.renderMode = GLSurfaceView.RENDERMODE_WHEN_DIRTY
//        glsurfaceview.renderMode = GLSurfaceView.RENDERMODE_CONTINUOUSLY
    glsurfaceview.requestRender()

//        /**
//         * 这是一个滑动条百分比的实时处理, 也就是页面上饱和度的值设置给render对象,
//         * 由于我们是自动更新页面(RENDERMODE_CONTINUOUSLY), 所以这个饱和度值会自动体现在图片上
//         */
//        saturation_seakbar.max = 200
//        saturation_seakbar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
//            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
//                myRenderer.saturationF = progress * 1f / 100f
//                saturation_tv.text = "饱和度:${progress}%"
//                Log.d(TAG, "onProgressChanged  progress:${myRenderer.saturationF}")
//            }
//
//            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
//            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
//        })

    tv_filter.setOnClickListener { showFilterDialog() }
    ll_switch_camera.setOnClickListener { switchCamera() }
    iv_back.setOnClickListener {
      requireActivity().finish()
    };
  }

  private fun switchCamera() {
    mCameraId = 1 - mCameraId
    closeCamera();
    openCamera(1280, 720);
  }

  private fun showFilterDialog() {
    var dialogFragment = BottomDialogFragment.getInstance(
      0, getSelection(),
      "选择滤镜", createFilterOptions()
    )
    dialogFragment.setSelectionCallBack { selection, option ->
      val filter = getFilterByName(option.optionName, requireContext())
      Log.d(VideoEditActivity.TAG, "selection:$selection, filter:$filter")
      eRenderer?.setGlFilter(filter)
//            glFilterList.putGlFilter(GlFilterPeriod(0, mediaDuration, filter))
//            filterConfigList.add(GlFilterConfig(filter.type, 0, mediaDuration))
    }
    dialogFragment.show(childFragmentManager, "filter_dialog")
  }

  private fun getSelection() = getInt(requireContext(), "filter_selection", 0)

  override fun onRenderCreated(surfaceTexture: SurfaceTexture, width: Int, height: Int) {
    Log.d(TAG, "onRenderCreated ... $surfaceTexture, width:" + width + ", height:" + height)
    this.surfaceTexture = surfaceTexture
    uiHandler.post {
      Log.i(
        TAG,
        "onViewCreated: glsurfaceview.width:" + glsurfaceview.width + ", glsurfaceview.height:" + glsurfaceview.height
      )
      var layoutParams = glsurfaceview.layoutParams
      layoutParams.height = (width * 16f / 9f).toInt()
      Log.i(
        TAG,
        "onViewCreated: set layoutParams.width:" + layoutParams.width + ", layoutParams.height:" + layoutParams.height
      )
      glsurfaceview.layoutParams = layoutParams;
    };
    openCamera(width, (width * 16f / 9f).toInt())
  }

  override fun onResume() {
    super.onResume()
    startBackgroundThread()
  }

  override fun onPause() {
//        closeCamera()
//        stopBackgroundThread()
    super.onPause()
  }

  private fun requestCameraPermission() {
    if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {
      ConfirmationDialog().show(childFragmentManager, FRAGMENT_DIALOG)
    } else {
      requestPermissions(arrayOf(Manifest.permission.CAMERA), REQUEST_CAMERA_PERMISSION)
    }
  }

  override fun onRequestPermissionsResult(
    requestCode: Int, permissions: Array<String>,
    grantResults: IntArray
  ) {
    if (requestCode == REQUEST_CAMERA_PERMISSION) {
      if (grantResults.size != 1 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {
        ErrorDialog.newInstance(getString(R.string.request_permission))
          .show(childFragmentManager, FRAGMENT_DIALOG)
      }
      openCamera(glsurfaceview.width, glsurfaceview.height)
    } else {
      super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }
  }

  /**
   * Sets up member variables related to camera.
   *
   * @param width  The width of available size for camera preview
   * @param height The height of available size for camera preview
   */
  private fun setUpCameraOutputs(width: Int, height: Int) {
    Log.d(TAG, "setUpCameraOutputs()  width:$width, height:$height")
    val activity = activity
    val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager
    try {
      for (cameraId in manager.cameraIdList) {
        if (cameraId != "$cameraId") {
          continue;
        }
        val characteristics = manager.getCameraCharacteristics(cameraId)

        // We don't use a front facing camera in this sample.
//                val facing = characteristics.get(CameraCharacteristics.LENS_FACING)
//                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
//                    continue
//                }

        val map = characteristics.get(
          CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP
        ) ?: continue

        // For still image captures, we use the largest available size.
        val largest = Collections.max(
          Arrays.asList(*map.getOutputSizes(ImageFormat.JPEG)),
          CompareSizesByArea()
        )
        // Find out if we need to swap dimension to get the preview size relative to sensor
        // coordinate.
        val displayRotation = activity.windowManager.defaultDisplay.rotation

        mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION)!!
        var swappedDimensions = false
        when (displayRotation) {
          Surface.ROTATION_0, Surface.ROTATION_180 -> if (mSensorOrientation == 90 || mSensorOrientation == 270) {
            swappedDimensions = true
          }

          Surface.ROTATION_90, Surface.ROTATION_270 -> if (mSensorOrientation == 0 || mSensorOrientation == 180) {
            swappedDimensions = true
          }

          else -> Log.e(TAG, "Display rotation is invalid: $displayRotation")
        }

        val displaySize = Point()
        activity.windowManager.defaultDisplay.getSize(displaySize)
        var rotatedPreviewWidth = width
        var rotatedPreviewHeight = height
        var maxPreviewWidth = displaySize.x
        var maxPreviewHeight = displaySize.y

        if (swappedDimensions) {
          rotatedPreviewWidth = height
          rotatedPreviewHeight = width
          maxPreviewWidth = displaySize.y
          maxPreviewHeight = displaySize.x
        }

        if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
          maxPreviewWidth = MAX_PREVIEW_WIDTH
        }

        if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
          maxPreviewHeight = MAX_PREVIEW_HEIGHT
        }

        // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
        // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
        // garbage capture data.
        mPreviewSize = chooseOptimalSize(
          map.getOutputSizes(SurfaceTexture::class.java),
          rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
          maxPreviewHeight, largest
        )
        mPreviewSize = Size(1920, 1080);
        Log.d(
          TAG,
          "setUpCameraOutputs() mPreviewSize width:${mPreviewSize!!.width}, height:${mPreviewSize!!.height}"
        )

        this.surfaceTexture!!.setDefaultBufferSize(mPreviewSize!!.width, mPreviewSize!!.height)

        // Check if the flash is supported.
        val available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE)
        mFlashSupported = available ?: false

//                mCameraId = cameraId
        return
      }
    } catch (e: CameraAccessException) {
      e.printStackTrace()
    } catch (e: NullPointerException) {
      // Currently an NPE is thrown when the Camera2API is used but not supported on the
      // device this code runs.
      ErrorDialog.newInstance(getString(R.string.camera_error))
        .show(childFragmentManager, FRAGMENT_DIALOG)
    }
  }

  /**
   * Opens the camera specified by [Camera2BasicFragment.mCameraId].
   */
  private fun openCamera(width: Int, height: Int) {
    Log.d(TAG, "openCamera()  width:$width, height:$height")
    if (ContextCompat.checkSelfPermission(
        requireActivity(),
        Manifest.permission.CAMERA
      ) != PackageManager.PERMISSION_GRANTED
    ) {
      requestCameraPermission()
      return
    }
    setUpCameraOutputs(width, height)
    val activity = activity
    val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager
    try {
      if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
        throw RuntimeException("Time out waiting to lock camera opening.")
      }
      manager.openCamera(Integer.toString(mCameraId), mStateCallback, mBackgroundHandler)
    } catch (e: CameraAccessException) {
      e.printStackTrace()
    } catch (e: InterruptedException) {
      throw RuntimeException("Interrupted while trying to lock camera opening.", e)
    }
  }

  /**
   * Closes the current [CameraDevice].
   */
  private fun closeCamera() {
    try {
      mCameraOpenCloseLock.acquire()
      if (null != mCaptureSession) {
        mCaptureSession!!.close()
        mCaptureSession = null
      }
      if (null != mCameraDevice) {
        mCameraDevice!!.close()
        mCameraDevice = null
      }

    } catch (e: InterruptedException) {
      throw RuntimeException("Interrupted while trying to lock camera closing.", e)
    } finally {
      mCameraOpenCloseLock.release()
    }
  }

  /**
   * Starts a background thread and its [Handler].
   */
  private fun startBackgroundThread() {
    mBackgroundThread = HandlerThread("CameraBackground")
    mBackgroundThread!!.start()
    mBackgroundHandler = Handler(mBackgroundThread!!.looper)
  }

  /**
   * Stops the background thread and its [Handler].
   */
  private fun stopBackgroundThread() {
    mBackgroundThread!!.quitSafely()
    try {
      mBackgroundThread!!.join()
      mBackgroundThread = null
      mBackgroundHandler = null
    } catch (e: InterruptedException) {
      e.printStackTrace()
    }
  }

  /**
   * Creates a new [CameraCaptureSession] for camera preview.
   */
  private fun createCameraPreviewSession() {
    try {
      val surface = Surface(surfaceTexture)
      // We set up a CaptureRequest.Builder with the output Surface.
      mPreviewRequestBuilder = mCameraDevice!!.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
      mPreviewRequestBuilder!!.addTarget(surface)

      // Here, we create a CameraCaptureSession for camera preview.
      mCameraDevice!!.createCaptureSession(
        Arrays.asList(surface),
        object : CameraCaptureSession.StateCallback() {

          override fun onConfigured(cameraCaptureSession: CameraCaptureSession) {
            // The camera is already closed
            if (null == mCameraDevice) {
              return
            }
            // When the session is ready, we start displaying the preview.
            mCaptureSession = cameraCaptureSession
            try {
              // Auto focus should be continuous for camera preview.
              mPreviewRequestBuilder!!.set(
                CaptureRequest.CONTROL_AF_MODE,
                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
              )
              // Flash is automatically enabled when necessary.
              setAutoFlash(mPreviewRequestBuilder)

              // Finally, we start displaying the camera preview.
              mPreviewRequest = mPreviewRequestBuilder!!.build()
              mCaptureSession!!.setRepeatingRequest(
                mPreviewRequest!!,
                null, mBackgroundHandler
              )
            } catch (e: CameraAccessException) {
              e.printStackTrace()
            }
          }

          override fun onConfigureFailed(
            cameraCaptureSession: CameraCaptureSession
          ) {
          }
        }, null
      )
    } catch (e: CameraAccessException) {
      e.printStackTrace()
    }
  }

  private fun setAutoFlash(requestBuilder: CaptureRequest.Builder?) {
    if (mFlashSupported) {
      requestBuilder!!.set(
        CaptureRequest.CONTROL_AE_MODE,
        CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
      )
    }
  }

  /**
   * Compares two `Size`s based on their areas.
   */
  internal class CompareSizesByArea : Comparator<Size> {

    override fun compare(lhs: Size, rhs: Size): Int {
      // We cast here to ensure the multiplications won't overflow
      return java.lang.Long.signum(lhs.width.toLong() * lhs.height - rhs.width.toLong() * rhs.height)
    }
  }

  /**
   * Shows an error message dialog.
   */
  class ErrorDialog : androidx.fragment.app.DialogFragment() {

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
      val activity = activity
      return AlertDialog.Builder(activity)
        .setMessage(requireArguments().getString(ARG_MESSAGE))
        .setPositiveButton(android.R.string.ok) { dialogInterface, i -> activity!!.finish() }
        .create()
    }

    companion object {

      private val ARG_MESSAGE = "message"

      fun newInstance(message: String): ErrorDialog {
        val dialog = ErrorDialog()
        val args = Bundle()
        args.putString(ARG_MESSAGE, message)
        dialog.arguments = args
        return dialog
      }
    }
  }

  /**
   * Shows OK/Cancel confirmation dialog about camera permission.
   */
  class ConfirmationDialog : androidx.fragment.app.DialogFragment() {

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
      val parent = parentFragment
      return AlertDialog.Builder(activity)
        .setMessage(R.string.request_permission)
        .setPositiveButton(android.R.string.ok) { dialog, which ->
          parent!!.requestPermissions(
            arrayOf(Manifest.permission.CAMERA),
            REQUEST_CAMERA_PERMISSION
          )
        }
        .setNegativeButton(
          android.R.string.cancel
        ) { dialog, which ->
          val activity = parent!!.activity
          activity?.finish()
        }
        .create()
    }
  }

  companion object {
    /**
     * Conversion from screen rotation to JPEG orientation.
     */
    private val ORIENTATIONS = SparseIntArray()
    private val REQUEST_CAMERA_PERMISSION = 1
    private val FRAGMENT_DIALOG = "dialog"

    init {
      ORIENTATIONS.append(Surface.ROTATION_0, 90)
      ORIENTATIONS.append(Surface.ROTATION_90, 0)
      ORIENTATIONS.append(Surface.ROTATION_180, 270)
      ORIENTATIONS.append(Surface.ROTATION_270, 180)
    }

    /**
     * Tag for the [Log].
     */
    private val TAG = "Camera2BasicFragment"

    /**
     * Camera state: Showing camera preview.
     */
    private val STATE_PREVIEW = 0

    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private val MAX_PREVIEW_WIDTH = 1920

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private val MAX_PREVIEW_HEIGHT = 1080

    /**
     * Given `choices` of `Size`s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     * class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal `Size`, or an arbitrary one if none were big enough
     */
    private fun chooseOptimalSize(
      choices: Array<Size>, textureViewWidth: Int,
      textureViewHeight: Int, maxWidth: Int, maxHeight: Int, aspectRatio: Size
    ): Size {

      // Collect the supported resolutions that are at least as big as the preview Surface
      val bigEnough = ArrayList<Size>()
      // Collect the supported resolutions that are smaller than the preview Surface
      val notBigEnough = ArrayList<Size>()
      val w = aspectRatio.width
      val h = aspectRatio.height
      for (option in choices) {
        if (option.width <= maxWidth && option.height <= maxHeight &&
          option.height == option.width * h / w
        ) {
          if (option.width >= textureViewWidth && option.height >= textureViewHeight) {
            bigEnough.add(option)
          } else {
            notBigEnough.add(option)
          }
        }
      }

      // Pick the smallest of those big enough. If there is no one big enough, pick the
      // largest of those not big enough.
      if (bigEnough.size > 0) {
        return Collections.min(bigEnough, CompareSizesByArea())
      } else if (notBigEnough.size > 0) {
        return Collections.max(notBigEnough, CompareSizesByArea())
      } else {
        Log.e(TAG, "Couldn't find any suitable preview size")
        return choices[0]
      }
    }

    fun newInstance(): Camera2BasicFragment {
      return Camera2BasicFragment()
    }
  }

}
